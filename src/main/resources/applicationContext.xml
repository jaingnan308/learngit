<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	default-lazy-init="false">

		<!-- 自动扫描(自动注入) 
	<context:component-scan base-package="com.family.finance" /> -->
	 
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	
	<!-- ======================IBATIS数据源配置= 查询数据库=========开始============================ -->
	<!-- 配置数据源 -->
	<bean id="dataSourceStat" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${driverClassName}" />
		<property name="jdbcUrl" value="${jdbc_url}" />
		<property name="user" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>3</value>
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>2</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>100</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<!--两次连接中间隔时间，单位毫秒，默认为1000 -->
		<property name="acquireRetryDelay">
			<value>1000</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="numHelperThreads">
			<value>10</value>
		</property>
	</bean>

	<!-- 管理iBatis，加载sqlMapConfig.xml文件 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:sqlmap.xml" />
		<property name="dataSource" ref="dataSourceStat" />
	</bean>
	
	<!-- spring mail邮箱配置 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.sina.com"></property>
		<property name="username" value="shui_jiangnan@sina.cn"></property>
		<property name="password" value="306338457"></property>
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>
	
    <bean id="baseSqlMapClientDAO"
		class="org.springframework.orm.ibatis.support.SqlMapClientDaoSupport"
		abstract="true">
		<property name="dataSource" ref="dataSourceStat" />
		<property name="sqlMapClient" ref="sqlMapClient" />
	</bean>
	
	<bean id="userDao" class="com.family.finance.dao.impl.UserDaoImpl" parent="baseSqlMapClientDAO" />
	
	<bean id="userService" class="com.family.finance.service.impl.UserServiceImpl" >
		 <property name="userDao" ref="userDao" />
	</bean>
	
	<bean id="userAccountDao" class="com.family.finance.dao.impl.UserAccountDaoImpl" parent="baseSqlMapClientDAO" />
	
	<bean id="userAccountService" class="com.family.finance.service.impl.UserAccountServiceImpl" >
		 <property name="userAccountDao" ref="userAccountDao" />
	</bean>
	
	<bean id="calendarDao" class="com.family.finance.dao.impl.calendar.CalendarDaoImpl" parent="baseSqlMapClientDAO" />
	
	<bean id="calendarService" class="com.family.finance.service.impl.calendar.CalendarServiceImpl" >
		 <property name="calendarDao" ref="calendarDao" />
	</bean>
	
	<!-- 发送邮件服务 -->
	<bean id="sendEmailservice" class="com.family.finance.service.impl.calendar.SendEmailserviceImpl">
		<property name="javaMailSender" ref="javaMailSender"></property>
	</bean>
	
	<!-- 定时邮件提醒服务 -->
	<bean id="mailRemindService" class="com.family.finance.service.impl.calendar.MailRemindServiceImpl">
		<property name="calendarService" ref="calendarService"></property>
		<property name="sendEmailservice" ref="sendEmailservice"></property>
	</bean>
	
</beans>